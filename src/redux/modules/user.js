import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from 'axios';

//Ïú†Ìö®ÏÑ±Í≤ÄÏÇ¨
const regexUsername = /^[A-Za-z0-9+]{4,12}$/;

export const __checkUsername = createAsyncThunk(
    "data/checkUsername",

    async (payload, thunkAPI) => {
        try {
            const data = await axios.post(`${process.env.REACT_APP_HOST}/user/idCheck/${payload.username}`);

            if (data.data.success === false) {
                alert(data.data.error.message);
            } else if (!regexUsername.test(payload.username)) {
                alert("‚ùå ÏïÑÏù¥Îîî ÌòïÏãùÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî!!! ‚ùå");
            }
            else alert("üëå ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏïÑÏù¥ÎîîÏûÖÎãàÎã§. üëå");

            return thunkAPI.fulfillWithValue(data.data);
        } catch (error) {
            return thunkAPI.rejectWithValue(error);
        }


    }
);

//Ïú†Ìö®ÏÑ±Í≤ÄÏÇ¨
const regexNickname = /^[Í∞Ä-Ìû£0-9+]{2,8}$/;


export const __checkNickname = createAsyncThunk(
    "data/checkNickname",
    async (payload, thunkAPI) => {
        try {
            const data = await axios.post(`${process.env.REACT_APP_HOST}/user/nicknameCheck/${payload.nickname}`);
            if (data.data.success === false) {
                alert(data.data.error.message);
            }
            else if (!regexNickname.test(payload.nickname)) {
                alert("‚ùå ÎãâÎÑ§ÏûÑ ÌòïÏãùÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî!!! ‚ùå");
            }
            else alert("ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎãâÎÑ§ÏûÑÏûÖÎãàÎã§.");
            return thunkAPI.fulfillWithValue(data.data);
        } catch (error) {
            return thunkAPI.rejectWithValue(error);
        }


    }
);


export const __logout = createAsyncThunk(
    "data/getComments",
    async (payload, thunkAPI) => {
        try {
            const data = await axios.post(`${process.env.REACT_APP_HOST}/user/logout`, payload,
                {
                    headers: {
                        "Authorization": localStorage.getItem("Authorization"),   //accesstoken
                        "RefreshToken": localStorage.getItem("RefreshToken"),
                    }
                });
        } catch (error) {
        }
    }
);



export const userSlice = createSlice({

    name: "user",
    initialState: {
        user: null
    },
    reducers: {
        logout(state) {
            localStorage.removeItem("Authorization")   //Î°úÍ∑∏ÏïÑÏõÉÏùÄ token, username Ï†úÍ±∞
            localStorage.removeItem("RefreshToken")
            localStorage.removeItem("nickname")
        }
    },


});



export const { logout } = userSlice.actions;
export default userSlice.reducer;